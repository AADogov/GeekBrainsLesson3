# Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
# в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы.
# Например:
# >>> thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": ["Иван", "Илья"],
#     "М": ["Мария"],
#     "П": ["Петр"]
# }
# --------------Решение----------------------
# мною было принято решение решать задачи 3.3 и 3.4 совместно,
# поэтому функция make_thesaurus на первый взгляд выглядит немного странно и переусложненно

# обьявляем функцию make_thesaurus параметры к ней persons это список имен и/или фамилий, и флаг определяющий иля или
# фамилию неообходимо обработать для имени одбирается нулевой симол нулевого слова, для фамилии нулевой символ
# первого словаолчанию flag='name'
def make_thesaurus(persons, flag='name'):
    # обьявляем словарь result для результата
    result = dict()
    # запускаем цикл по листу persons
    for person in persons:
        # Для каждого элемента списка person листе persons
        if flag == 'name':
            # если flag='name' то в переменную key положим нулевой символ имени
            name: object = person.split()[0]
            key = name[0]
        elif flag == 'family name':
            # если flag='family name' то в переменную key положим нулевой символ фамилии
            family_name: object = person.split()[1]
            key = family_name[0]
        else:
            # Во всех остальных случаях вернем None
            return None
        # затем проверим наличие ключа в словаре persons
        if key in result:
            # Если  ключ есть то добаляем в список расположенный по ключу
            result[key].append(person)
        else:
            # Если  ключа нет то добаляем в список расположенный по ключу и добавляем в ноего нулевой элемент
            result[key] = []
            result[key].append(person)
    # возврашаем результат
    return result


# выполняем условия третьего задания создаем функцию thesaurus применяем оператор распаковки *
def thesaurus(*args):
    # в нутри функции вызываем функцию make_thesaurus и предаем ей аргументы как список
    return make_thesaurus(list(args))


# Проверяем
print(thesaurus("Иван Сегреев", "Мария", "Петр", "Илья"))


# *(вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате «Имя
# Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, реализованные по
# схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы. Например:
# --------------Решение----------------------
# выполняем условия четвертого задания создаем функцию thesaurus_adv применяем оператор распаковки *
def thesaurus_adv(*args):
    # обьявляем family_name_dict и присваеваем ему значение  make_thesaurus с параметрами args и флагом family name
    family_name_dict = make_thesaurus(list(args), 'family name')
    # обьявляем словарь result для результата
    result = dict()
    # в цикле по словарю family_name_dict_element
    for family_name_dict_element in family_name_dict:
        # в словарь результата с параметром family_name_dict_element и вызвываем фунцию make_thesaurus с условиями
        # как в первой задачи.
        result[family_name_dict_element] = make_thesaurus(list(family_name_dict[family_name_dict_element]))
    # возврашаем результат
    return result


# Проверяем
print(thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева"))
